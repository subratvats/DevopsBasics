# Maven   
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

# trigger:
# - master

pool:
  vmImage: ubuntu-latest

steps:

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'


- task: CopyFiles@2
  inputs:
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'
##this is done to publish file in az devops
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'warfile'
    publishLocation: 'Container'
    MaxArtifactSize: 0

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    publishLocation: 'pipeline'
##NOTE:  for this to use we created a service principal(App registration) and created client secret in that and added role assignment "Storage Blob Data Contributor" on sp at subscription level and created serviceconnection  Azure Resource Manager(manual)
 
## The Storage Blob Data Contributor role provides sufficient permissions to manage blob data in your Azure Storage account, including reading, writing, and deleting blobs. 
## However, if you need to (e.g., creating containers, managing account keys, configuring settings), you might need broader permissions provided by the Contributor role.

- task: AzureCLI@2
  inputs:
    azureSubscription: 'dataupload'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "$(Build.ArtifactStagingDirectory) is the path"
      cd $(Build.ArtifactStagingDirectory)
      pwd;ls -lrt; ls -l webapp/target;
      az storage blob upload --account-name automationstt23484 \
        --container-name remotestatebackend \
        --file $(Build.ArtifactStagingDirectory)/webapp/target/*.war \
        --name webapp.war \
        --overwrite \
        --auth-mode login
